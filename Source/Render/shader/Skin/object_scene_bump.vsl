struct VS_INPUT
{
    float4 pos : POSITION;
	float3 n : NORMAL;
    float2 t0 : TEXCOORD0;
#if(WEIGHT>1)    
	float4 blend_weight: COLOR0;
#endif	
    float4 blend:BLENDINDICES;
	float3 T : TEXCOORD1; //tangent
	float3 S : TEXCOORD2; //binormal
	float3 SxT : TEXCOORD3; //normal
};

struct VS_OUTPUT
{
    float4  pos : POSITION;
    float2  t0 : TEXCOORD0;
	float3  light_obj : TEXCOORD3;
	float3  half_obj : TEXCOORD4;
};

float4x4 mVP: register(c0);

float4 vAmbient: register(c5);
float4 vDiffuse: register(c6);
float4 vSpecular: register(c7);
float fSpecularPower: register(c8);
float3 vCameraPos: register(c9);
float3 vLightDirection: register(c10);

float4x3 mWorldM[20]: register(c11);

VS_OUTPUT main(const VS_INPUT v)
{
    VS_OUTPUT o;
	float3 world_pos;
	float4x3 mWorld;
	int4 blend = D3DCOLORtoUBYTE4(v.blend);
	
#if (WEIGHT>1)	
		mWorld=mWorldM[blend[0]]*v.blend_weight[0];
		for(int i=1;i<WEIGHT;i++)
		{
			mWorld+=mWorldM[blend[i]]*v.blend_weight[i];
		}
		
#else
		mWorld=mWorldM[blend[0]];
#endif	
	
	world_pos=mul(v.pos,mWorld);

	o.pos=mul(float4(world_pos,1),mVP);
	o.t0=v.t0;

	//light
	float3x3 mInvWorld=transpose((float3x3)mWorld);
	
	float3 light=-mul(vLightDirection,mInvWorld);
	// move light vector into tangent space
	o.light_obj.x=dot(light,v.T);
	o.light_obj.y=dot(light,v.S);
	o.light_obj.z=dot(light,v.SxT);
	o.light_obj=normalize(o.light_obj);//потом просто *1/scale

	float3 dir=normalize(vCameraPos-world_pos);
	float3 half_v=dir-vLightDirection;
	float3 half_obj=normalize(mul(half_v,mInvWorld));

	o.half_obj.x=dot(half_obj,v.T);
	o.half_obj.y=dot(half_obj,v.S);
	o.half_obj.z=dot(half_obj,v.SxT);
	o.half_obj=normalize(o.half_obj);
    return o;
}
