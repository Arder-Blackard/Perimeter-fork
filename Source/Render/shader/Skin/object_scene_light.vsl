struct VS_INPUT
{
    float4 pos : POSITION;
	float3 n : NORMAL;
    float2 t0 : TEXCOORD0;
#if(WEIGHT>1)    
	float4 bw: COLOR0;
#endif	
    //int4 blend:BLENDINDICES;
    float4 blend:BLENDINDICES;
};

struct VS_OUTPUT
{
    float4  pos : POSITION;
    float2  t0 : TEXCOORD0;
	float4  diffuse: COLOR0;
	float4  specular: COLOR1;
};

float4x4 mVP: register(c0);

float4 vAmbient: register(c5);
float4 vDiffuse: register(c6);
float4 vSpecular: register(c7);
float fSpecularPower: register(c8);
float3 vCameraPos: register(c9);
float3 vLightDirection: register(c10);

float4x3 mWorldM[20]: register(c11);

VS_OUTPUT main(const VS_INPUT v)
{
    VS_OUTPUT o;
	float3 world_pos;
	float3 world_n;
	float4x3 mWorld;
	float sum_weight;
	int4 blend = D3DCOLORtoUBYTE4(v.blend);
	
#if (WEIGHT>1)	
		sum_weight=v.bw[0];

		mWorld=mWorldM[blend[0]]*v.bw[0];
		for(int i=1;i<WEIGHT;i++)
		{
			mWorld+=mWorldM[blend[i]]*v.bw[i];
			sum_weight+=v.bw[i];
		}
		
#else
		sum_weight=0;
		mWorld=mWorldM[blend[0]];
#endif	
	
	world_pos=mul(v.pos,mWorld);
	world_n=mul(v.n,(float3x3)mWorld);

	o.pos=mul(float4(world_pos,1),mVP);
	o.t0=v.t0;

	//light
	
	world_n=normalize(world_n);

	float3 ldir=-vLightDirection;
	float3 dir=normalize(vCameraPos-world_pos);
	float3 half_v=normalize(dir+ldir);
	float4 ret=lit(dot(world_n,ldir),dot(world_n,half_v),fSpecularPower); 

	float mdiffuse=ret.y;
	float mspecular=ret.z;
	o.diffuse=mdiffuse*vDiffuse+vAmbient;
	o.specular=mspecular*vSpecular;

    return o;
}
